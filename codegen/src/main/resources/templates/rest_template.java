/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2010 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de, 
 * All rights reserved.
 * 
 * The contents of this file are subject to the terms of the Common
 * Development and Distribution License("CDDL") (the "License"). You 
 * may not use this file except in compliance with the License. You can 
 * obtain a copy of the License at http://www.sun.com/cddl/cddl.html
 * 
 * See the License for the specific language governing permissions and 
 * limitations under the License.  When distributing the software, include 
 * this License Header Notice in each file.  If applicable, add the following 
 * below the License Header, with the fields enclosed by brackets [] replaced
 *  by your own identifying information:
 * 
 * "Portions Copyrighted [year] [name of copyright owner]"
 * 
 * Contributor(s):
 * 
 */
package <#getPackageName/#>;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Map;



import de.unibi.cebitec.bibiserv.util.convert.ConversionException;
import de.unibi.cebitec.bibiserv.util.validate.ValidationException;
import de.unibi.techfak.bibiserv.Status;
import de.unibi.techfak.bibiserv.exception.BiBiToolsException;
import de.unibi.techfak.bibiserv.exception.DBConnectionException;
import de.unibi.techfak.bibiserv.exception.IdNotFoundException;
//threadworker
import de.unibi.techfak.bibiserv.tools.<#getToolId/#>.<#getClassName/#>_threadworker;

import de.unibi.techfak.bibiserv.util.Pair;
import de.unibi.techfak.bibiserv.util.ontoaccess.bibiontotypes.OntoRepresentation;
import de.unibi.techfak.bibiserv.web.beans.Input;
import de.unibi.techfak.bibiserv.web.beans.session.AbstractCloudInputBean;
import de.unibi.techfak.bibiserv.web.beans.session.InputBeanInterface;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import org.apache.log4j.Logger;

 /* This is a autogenerated function bean template class for function <i><#getClassName/#></i>
 *
 * @author Jan Krueger - jkrueger[aet]cebitec.uni-bielefeld.de
 */
@Path("<#getToolId/#>/<#getClassName/#>")
public class <#getClassName/#> {


    private static Logger log = Logger.getLogger(<#getPackageName/#>.<#getClassName/#>.class);
    private de.unibi.techfak.bibiserv.tools.<#getToolId/#>.<#getClassName/#> impl = new de.unibi.techfak.bibiserv.tools.<#getToolId/#>.<#getClassName/#>();
    private static <#getClassName/#>_threadworker threadworker = new <#getClassName/#>_threadworker();        
            

    public <#getClassName/#>() {
        impl.setThreadworker(threadworker);    
    }
    
    
    // request
    @POST
    @Path("/request")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.APPLICATION_JSON)
    public String request(@Context HttpServletResponse response, @Context HttpServletRequest request) throws IOException {
      
        
         try {
             JSON json = new ObjectMapper().readValue(request.getInputStream(), JSON.class);
        
            // convert param map to a list of parameter pairs
            List<Pair<String, String>> paramlist = new ArrayList();
            if (json.getParamset() != null) {
                for (String k : json.getParamset().keySet()) {
                    paramlist.add(new Pair(k, json.getParamset().get(k)));
                }
            }
        
       
            // for all inputs
        
       
            <#for_each_input#>
            AbstractCloudInputBean input___NUMBER___ = new de.unibi.techfak.bibiserv.tools.<#getToolId/#>.web.###INPUT_ID###();
            checkInput(response, "input___NUMBER___", de.unibi.techfak.bibiserv.tools.<#getToolId/#>.<#getClassName/#>.getRepresentationInput___NUMBER___(), input___NUMBER___, json.get###INPUT_ID_BEAN###(), json.get###INPUT_ID_BEAN###_url());
            <#/for_each_input#>

        
            // request call
        
            // paramalist, data1.input, data1.type, data1.streaming, data1.skipValidating ...
            String id = impl.request(paramlist, null, null, 
                    // for all inputs
                    
                    <#for_each_input_separated#>
                    input___NUMBER___.getInput().getInput(), input___NUMBER___.getInput().getChosen(), false, false              
                    <#/for_each_input_separated#>                                        
                    );
                    
            return id;
         } catch (JsonParseException | JsonMappingException e) {       
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code", "701 Unsupported JSON object (" + e.getMessage() + ")");
        } catch (BiBiToolsException e) {
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code",e.returnFaultCode()+ " "+e.returnFaultString());
        } catch (ConversionException | ValidationException e) {
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code","701 "+e.getMessage());
        } catch (IOException e) {
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code","700 general error ("+e.getMessage()+")");
        }
        response.flushBuffer();
        return null;
    }
    
    @POST
    @Path("/request")
    public Object request_honeypot(@Context HttpServletResponse response) throws Exception{
        response.setStatus(415);
        response.flushBuffer();
        return null;
    }

     @POST
    @Path("/response")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.TEXT_PLAIN)
    public InputStream response(@Context HttpServletResponse response, String id) throws Exception {

        try {
            Status currentstatus = impl.getStatus(id);
            // check if we are finished ...
            if (currentstatus.getStatuscode() == 600) {
                return (InputStream) impl.response(id, de.unibi.techfak.bibiserv.tools.<#getToolId/#>.<#getClassName/#>.getRepresentationOutput(), true);
            }
            response.setStatus(currentstatus.getStatuscode(), currentstatus.getDescription());
        } catch (BiBiToolsException e) {
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code",e.returnFaultCode()+ " " + e.returnFaultString());
        } catch (IdNotFoundException e) {
            response.setStatus(400);
            response.addHeader("X-Application-Error-Code","706 Id unkown (or deleted)");
        } catch (DBConnectionException e) {
            response.setStatus(500);
            response.addHeader("X-Application-Error-Code","724 internal resource error");
        } catch (ConversionException e) {
            response.setStatus(500);
            response.addHeader("X-Application-Error-Code","700 general error ("+e.getMessage()+")");
        }
        response.flushBuffer();
        return null;
    }
     
     @POST
    @Path("/response")
    public Object response__honeypot(@Context HttpServletResponse response) throws Exception{
        response.setStatus(415);
        response.flushBuffer();
        return null;
    }

    @POST
    @Path("/status")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.TEXT_PLAIN)
    public String status(String id) {
        try {
            return impl.getStatus(id).toString();
        } catch (BiBiToolsException e) {
            return e.returnFaultCode() + "-" + e.returnFaultString();
        }
    }

    @POST
    @Path("/statuscode")
    @Produces(MediaType.TEXT_PLAIN)
    @Consumes(MediaType.TEXT_PLAIN)
    public String statuscode(String id) {
        try {
            return Integer.toString(impl.getStatus(id).getStatuscode());
        } catch (BiBiToolsException e) {
            return Integer.toString(e.returnFaultCode());
        } catch (IdNotFoundException e) {
            return "706";
        } catch (DBConnectionException e) {
            return "724";
        }
    }
    
    /* -- private helper method -- */
    private void checkInput(HttpServletResponse response, String name, OntoRepresentation or, InputBeanInterface inputbean, String content, String url) throws IOException, BiBiToolsException {


        if (content != null) {
            Input input = new Input();
            input.setInput(content);
            input.setChosen(or);
            input.setRepresentations(new ArrayList<OntoRepresentation>());
            
            // add to InputBean
            inputbean.setInput(input);
            return;

        }

        if (url != null) {
            // read content from file using Stream Validator

            Input input = new Input();
            // create a new ValidationConnection as Input
            // input.setInput(new URLValidationConnection(new URLConnection(new URL(url))));


            input.setChosen(or);
            input.setRepresentations(new ArrayList<OntoRepresentation>());
            //input.setSkipValidation(true);
            input.setSource(url);
            return;
        }

        throw new BiBiToolsException(701,"Input '"+name+"' is missing. Either '" + name + "' or '" + name + "_url'must be set!");


    }
    
     public static class JSON {

        /* parameter as key-value pairs */
        private Map<String, Object> paramset;
        /* support for AWS S3 access - all optional*/
        private String accesskey;
        private String secretkey;
        private String sessiontoken;
       
       

        public Map<String, Object> getParamset() {
            return paramset;
        }

        public void setParamset(Map<String, Object> paramset) {
            this.paramset = paramset;
        }

        public String getAccesskey() {
            return accesskey;
        }

        public void setAccesskey(String accesskey) {
            this.accesskey = accesskey;
        }

        public String getSecretkey() {
            return secretkey;
        }

        public void setSecretkey(String secretkey) {
            this.secretkey = secretkey;
        }

        public String getSessiontoken() {
            return sessiontoken;
        }

        public void setSessiontoken(String sessiontoken) {
            this.sessiontoken = sessiontoken;
        }

        <#for_each_input#>
         
        private String input_###INPUT_ID###;  // as plain string
        private String input_###INPUT_ID###_type; // type - optional;
        private String input_###INPUT_ID###_url; // as url
         
       public String get###INPUT_ID_BEAN###() {
            return input_###INPUT_ID###;
        }

        public void set###INPUT_ID_BEAN###(String i) {
            this.input_###INPUT_ID### = i;
        }

        public String get###INPUT_ID_BEAN###_type() {
            return input_###INPUT_ID###_type;
        }

        public void set###INPUT_ID_BEAN###_type(String t) {
            this.input_###INPUT_ID###_type = t;
        }

        public String get###INPUT_ID_BEAN###_url() {
            return input_###INPUT_ID###_url;
        }

        public void set###INPUT_ID_BEAN###_url(String u) {
            this.input_###INPUT_ID###_url = u;
        }

         <#/for_each_input#>
       
      
    }
    

}
