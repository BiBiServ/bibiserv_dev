/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 * 
 * Copyright 2010-2014 BiBiServ Curator Team, http://bibiserv.cebitec.uni-bielefeld.de, 
 * All rights reserved.
 * 
 * The contents of this file are subject to the terms of the Common
 * Development and Distribution License("CDDL") (the "License"). You 
 * may not use this file except in compliance with the License. You can 
 * obtain a copy of the License at http://www.sun.com/cddl/cddl.html
 * 
 * See the License for the specific language governing permissions and 
 * limitations under the License.  When distributing the software, include 
 * this License Header Notice in each file.  If applicable, add the following 
 * below the License Header, with the fields enclosed by brackets [] replaced
 *  by your own identifying information:
 * 
 * "Portions Copyrighted 2010-2014 BiBiServ Curator Team"
 * 
 * Contributor(s):
 * 
 */
package <#getPackageName/#>;

import de.unibi.cebitec.bibiserv.util.validate.ValidationException;
import de.unibi.techfak.bibiserv.cms.Texample.Prop;
import de.unibi.techfak.bibiserv.tools.<#getToolId/#>.Utilities;
import de.unibi.techfak.bibiserv.util.Pair;
import de.unibi.techfak.bibiserv.util.StringUtil;
import de.unibi.techfak.bibiserv.web.beans.session.MessagesInterface;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import javax.faces.event.ActionEvent;
import org.apache.log4j.Logger;

/**
 * This is a autogenerated bean input template class for function <i><#getClassName/#></i>
 *
 * @author Daniel Hagemeier - dhagemei[aet]cebitec.uni-bielefeld.de
 *         Armin Toepfer - atoepfer[aet]cebitec.uni-bielefeld.de
 *         Jan Krueger - jkrueger[aet]cebitec.uni-bielefeld.de
 */
 public class <#getClassName/#>   { 

     private final static Logger log = Logger.getLogger(<#getClassName/#>.class);


    /* #########################################
     * #     DI method setMessages             #
     * ######################################### */
    private MessagesInterface messages;

    public void setMessages(MessagesInterface messages) {
        this.messages = messages;
    }
    
    /* #########################################
     * #     parameter default values          #
     * ######################################### */
    <#generateParamDefaults/#>

    /* #########################################
     * #     parameters are valid ?            #
     * ######################################### */
     public boolean isValid(){
        return true
                <#for_each_param_enum#>
                && valid____PARAM_ID___
                <#/for_each_param_enum#>
                ;
    }
     
    /* ######################################
     * # example                            #
     * ######################################
     */
    public boolean checkAndSet(Prop p) {
        <#for_each_enum#>
        if (p.getIdref().equals("___PARAM_ID___")) {
            ___PARAM_ID___ = p.getValue().split("___SEPARATOR___"); 
            return true;
        }
        <#/for_each_enum#>
        
        <#for_each_param#>
        if (p.getIdref().equals("___PARAM_ID___")) {
            ___PARAM_ID___ = p.getValue(); 
            return true;
        }
        <#/for_each_param#>
        return false;
    }

     /* #########################################
     *          fault(=invalid) messages
     * ######################################### */
    private HashMap<String, String> faultmsg = new HashMap<String, String>();

    public String faultmsg(String key) {
        return faultmsg.get(key);
    }

    public boolean faultmsgExist(String key) {
        return faultmsg.containsKey(key);
    }

    public void addFaultmsg(String key, String value) {
        faultmsg.put(key, value);
    }

    /**
     * Return a Parameter list of all set (non-empty) parameters.
     *
     * @return List<Pair<parameter_id<String>,parameter_value<String>>
     */
    public List<Pair<String, String>> getParameterList() {
        List<Pair<String, String>> pairlist = new ArrayList();
        <#for_each_enum#>
        if (___PARAM_ID___.length != 0) {
            pairlist.add(new Pair("___PARAM_ID___", StringUtil.join(___PARAM_ID___,"___SEPARATOR___")));
        }
        <#/for_each_enum#>
        <#for_each_param#>
        if (!___PARAM_ID___.isEmpty()) {
            pairlist.add(new Pair("___PARAM_ID___", ___PARAM_ID___));
        }
        <#/for_each_param#>

        return pairlist;
    }


    /* #########################################
     * #  parameter getter, setter, validator  #
     * ######################################### */
     <#generateParamGetterSetterValidator/#>
    
}
